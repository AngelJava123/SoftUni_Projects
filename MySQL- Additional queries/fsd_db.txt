CREATE DATABASE fsd;

CREATE TABLE countries(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(45) NOT NULL
);

CREATE TABLE towns(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(45) NOT NULL,
`country_id` INT NOT NULL,
CONSTRAINT fk_towns_countries FOREIGN KEY (country_id)
REFERENCES countries(id)
);

CREATE TABLE stadiums(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(45) NOT NULL,
`capacity` INT NOT NULL,
`town_id` INT NOT NULL,
CONSTRAINT fk_stadiums_towns FOREIGN KEY (town_id)
REFERENCES towns(id)
);

CREATE TABLE teams(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(45) NOT NULL,
`established` DATE NOT NULL,
`fan_base` BIGINT(20) NOT NULL DEFAULT 0,
`stadium_id` INT NOT NULL,
CONSTRAINT fk_teams_stadiums FOREIGN KEY (stadium_id)
REFERENCES stadiums(id)
);

CREATE TABLE skills_data(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`dribbling` INT DEFAULT 0,
`pace` INT DEFAULT 0,
`passing` INT DEFAULT 0,
`shooting` INT DEFAULT 0,
`speed` INT DEFAULT 0,
`strength` INT DEFAULT 0
);

CREATE TABLE coaches(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`first_name` VARCHAR(10) NOT NULL,
`last_name` VARCHAR(20) NOT NULL,
`salary` DECIMAL(10,2) NOT NULL DEFAULT 0,
`coach_level` INT NOT NULL DEFAULT 0
);

CREATE TABLE players(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`first_name` VARCHAR(10) NOT NULL,
`last_name` VARCHAR(20) NOT NULL,
`age` INT NOT NULL DEFAULT 0,
`position` CHAR(1) NOT NULL,
`salary` DECIMAL(10,2) NOT NULL DEFAULT 0,
`hire_date` DATETIME,
`skills_data_id` INT NOT NULL,
`team_id` INT,
CONSTRAINT fk_players_skills_data FOREIGN KEY (skills_data_id)
REFERENCES skills_data (id),
CONSTRAINT fk_players_teams FOREIGN KEY (team_id)
REFERENCES teams (id)
);

CREATE TABLE players_coaches(
`player_id` INT,
`coach_id` INT,
CONSTRAINT fk_players_coaches_players FOREIGN KEY (player_id)
REFERENCES players (id),
CONSTRAINT fk_players_coaches_coaches FOREIGN KEY (coach_id)
REFERENCES coaches (id)
);

INSERT INTO coaches(`first_name`,`last_name`,`salary`,`coach_level`)
SELECT (p.first_name) AS `first_name`,
	   (p.last_name) AS `last_name`,
       (p.salary * 2) AS `salary`,
       (char_length(p.`first_name`)) AS `coach_level`
       FROM players p
       WHERE p.age >= 45;
       
SELECT COUNT(id) FROM coaches;

UPDATE coaches SET coach_level = coach_level + 1
WHERE id IN (SELECT coach_id FROM players_coaches) AND LEFT(first_name, 1) = 'A';

DELETE FROM players 
WHERE age >= 45;

SELECT p.first_name, p.age, p.salary FROM players p
ORDER BY p.salary DESC;

SELECT p.id, concat(p.first_name, ' ', p.last_name) AS full_name, p.age, p.`position`, p.hire_date
FROM players p
JOIN skills_data sd ON p.skills_data_id = sd.id
WHERE p.age < 23 AND p.`position` = 'A' AND p.hire_date IS NULL AND sd.strength > 50
ORDER BY p.salary, p.age;

SELECT t.`name` AS team_name, t.established, t.fan_base, count(p.first_name) AS count_of_players
FROM teams t
LEFT JOIN players p ON t.id = p.team_id
GROUP BY team_name,t.established, t.fan_base
ORDER BY count_of_players DESC, t.fan_base DESC;

SELECT max(sd.speed) AS max_speed, t.`name` AS town_name
FROM skills_data sd
RIGHT JOIN players p ON sd.id = p.skills_data_id
RIGHT JOIN teams te ON te.id = p.team_id
RIGHT JOIN stadiums st ON st.id = te.stadium_id
RIGHT JOIN towns t ON t.id = st.town_id
WHERE te.`name` NOT IN ('Devify')
GROUP BY town_name
ORDER BY max_speed DESC, town_name;

SELECT c.`name`, count(p.first_name) AS total_count_of_players, sum(p.salary) AS total_sum_of_salaries
FROM players p
RIGHT JOIN teams te ON te.id = p.team_id
RIGHT JOIN stadiums st ON st.id = te.stadium_id
RIGHT JOIN towns t ON t.id = st.town_id
RIGHT JOIN countries c ON t.country_id = c.id
GROUP BY c.`name`
ORDER BY total_count_of_players DESC, c.`name`;

DELIMITER $$
CREATE FUNCTION udf_stadium_players_count (stadium_name VARCHAR(30)) 
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE coun INT;
SET coun = (SELECT count(p.first_name) FROM players p
            JOIN teams te ON te.id = p.team_id
            JOIN stadiums st ON st.id = te.stadium_id
            WHERE st.`name` = stadium_name);
            RETURN coun;
END$$
DELIMITER ;

SELECT udf_stadium_players_count ('Jaxworks') as `count`;
SELECT udf_stadium_players_count ('Linklinks') as `count`; 

DELIMITER $$
CREATE PROCEDURE udp_find_playmaker(min_dribble_points INT,team_name VARCHAR(45))
BEGIN
SELECT concat(p.first_name, ' ', p.last_name) AS full_name,p.age, p.salary, sd.dribbling, sd.speed, te.`name`
FROM players p
JOIN skills_data sd ON p.skills_data_id = sd.id
JOIN teams te ON p.team_id = te.id
WHERE sd.dribbling > min_dribble_points AND te.`name` = team_name AND sd.speed > (SELECT avg(sd.speed) FROM skills_data sd)
ORDER BY sd.speed DESC LIMIT 1;
END$$
DELIMITER ;

CALL udp_find_playmaker (20, 'Skyble');

