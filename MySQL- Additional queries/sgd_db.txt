CREATE DATABASE sgd;

CREATE TABLE addresses(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL
);

CREATE TABLE categories(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(10) NOT NULL
);

CREATE TABLE offices(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`workspace_capacity` INT NOT NULL,
`website` VARCHAR(50),
`address_id` INT NOT NULL,
CONSTRAINT fk_offices_addresses FOREIGN KEY (address_id)
REFERENCES addresses (id)
);

CREATE TABLE employees(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`first_name` VARCHAR(30) NOT NULL,
`last_name` VARCHAR(30) NOT NULL,
`age` INT NOT NULL,
`salary` DECIMAL(10,2) NOT NULL,
`job_title` VARCHAR(20) NOT NULL,
`happiness_level` CHAR(1) NOT NULL
);

CREATE TABLE teams(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL,
`office_id` INT NOT NULL,
`leader_id` INT UNIQUE NOT NULL,
CONSTRAINT fk_teams_offices FOREIGN KEY (office_id)
REFERENCES offices (id),
CONSTRAINT fk_teams_employees FOREIGN KEY (leader_id)
REFERENCES employees (id)
);

CREATE TABLE games(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(50) UNIQUE NOT NULL,
`description` TEXT,
`rating` FLOAT DEFAULT 5.5 NOT NULL,
`budget` DECIMAL(10,2) NOT NULL,
`release_date` DATE,
`team_id` INT NOT NULL,
CONSTRAINT fk_games_teams FOREIGN KEY (team_id)
REFERENCES teams (id)
);

CREATE TABLE games_categories(
`game_id` INT NOT NULL,
`category_id` INT NOT NULL,
PRIMARY KEY(game_id, category_id),
CONSTRAINT fk_games_categories_games FOREIGN KEY (game_id)
REFERENCES games(id),
CONSTRAINT fk_games_categories_categories FOREIGN KEY (category_id)
REFERENCES categories(id)
);

INSERT INTO games(`name`, `rating`, `budget`, `team_id`)
SELECT (lower(REVERSE(SUBSTRING(t.`name`, 2)))) AS `name`,
        t.`id` AS `rating`,
        t.`leader_id` * 1000 AS `budget`,
        t.`id` AS `team_id`
        FROM teams t 
        WHERE t.`id` BETWEEN 1 AND 9;

UPDATE employees
SET salary = salary + 1000
WHERE age < 40 AND salary <= 5000;

DELETE FROM games 
WHERE release_date IS NULL AND id NOT IN (SELECT game_id FROM games_categories);

SELECT first_name, last_name, age, salary, happiness_level
FROM employees
ORDER BY salary, id;

SELECT t.`name`, a.`name`, CHAR_LENGTH(a.`name`) AS count_of_characters
FROM teams t
JOIN offices o ON o.id = t.office_id
JOIN addresses a ON o.address_id = a.id
WHERE o.website IS NOT NULL
ORDER BY t.`name`, a.`name`;

SELECT c.`name`, count(g.`name`) AS games_count, 
ROUND(AVG(g.budget), 2) AS avg_budget, MAX(rating) AS max_rating
FROM categories c JOIN games_categories gc ON c.id = gc.category_id
JOIN games g ON gc.game_id = g.id
GROUP BY c.`name`
HAVING max_rating >= 9.5
ORDER BY games_count DESC, c.`name`;

SELECT g.`name`, g.`release_date`, concat(substring(g.`description`, 1, 10), '...') AS `summary`,
(CASE
    WHEN month(g.release_date) IN (1, 2, 3) THEN  "Q1"
    WHEN month(g.release_date) IN (4, 5, 6) THEN  "Q2"
    WHEN month(g.release_date) IN (7, 8, 9) THEN "Q3"
    WHEN month(g.release_date) IN (10, 11, 12) THEN "Q4"
END) AS `quarter`, t.`name`
FROM games g JOIN teams t ON g.team_id = t.id
WHERE g.`name` LIKE '%2' AND (month(g.release_date) % 2 = 0) AND year(g.release_date) = 2022
ORDER BY `quarter`;

SELECT g.`name`, (CASE
			      WHEN g.budget < 50000 THEN  'Normal budget'
                  ELSE 'Insufficient budget'
                  END) AS `budget_level`,
                  t.`name` AS team_name,
                  a.`name` AS address_name 
FROM games g JOIN teams t ON g.team_id = t.id
JOIN offices o ON o.id = t.office_id
JOIN addresses a ON o.address_id = a.id
WHERE g.release_date IS NULL AND g.id NOT IN (SELECT game_id FROM games_categories)
ORDER BY g.`name`;

DELIMITER $$
CREATE FUNCTION udf_game_info_by_name (game_name VARCHAR (20)) 
RETURNS TEXT
DETERMINISTIC
BEGIN
DECLARE info TEXT;
SET info = (SELECT concat_ws(' ', 'The', g.`name`,  'is', 'developed' , 'by', 'a', t.`name`, 'in', 'an', 'office', 
'with', 'an', 'address', a.`name`
) FROM games g
            JOIN teams t ON t.id = g.team_id
            JOIN offices o ON o.id = t.office_id
            JOIN addresses a ON a.id = o.address_id
            WHERE g.`name` = game_name);
            RETURN info;
END$$
DELIMITER ;

SELECT udf_game_info_by_name('Bitwolf') AS info;
SELECT udf_game_info_by_name('Fix San') AS info;
SELECT udf_game_info_by_name('Job') AS info;

DELIMITER $$
CREATE PROCEDURE udp_update_budget(min_game_rating FLOAT)
BEGIN
UPDATE games SET budget = budget + 100000, release_date = DATE_ADD(release_date, INTERVAL 1 YEAR)
WHERE id NOT IN (SELECT game_id FROM games_categories) AND rating > min_game_rating AND release_date
IS NOT NULL;
END$$
DELIMITER ;

CALL udp_update_budget (8);