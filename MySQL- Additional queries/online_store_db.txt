CREATE DATABASE online_store;

CREATE TABLE brands(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE categories(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE reviews(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`content` TEXT,
`rating` DECIMAL(10,2) NOT NULL,
`picture_url` VARCHAR(80) NOT NULL,
`published_at` DATETIME NOT NULL
);

CREATE TABLE products(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL,
`price` DECIMAL(19,2) NOT NULL,
`quantity_in_stock` INT,
`description` TEXT,
`brand_id` INT NOT NULL,
`category_id` INT NOT NULL,
`review_id` INT,
CONSTRAINT fk_products_brands FOREIGN KEY (brand_id)
REFERENCES brands (id),
CONSTRAINT fk_products_categories FOREIGN KEY (category_id)
REFERENCES categories (id),
CONSTRAINT fk_products_reviews FOREIGN KEY (review_id)
REFERENCES reviews (id)
);

CREATE TABLE customers(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`first_name` VARCHAR(20) NOT NULL,
`last_name` VARCHAR(20) NOT NULL,
`phone` VARCHAR(30) NOT NULL UNIQUE,
`address` VARCHAR(60) NOT NULL,
`discount_card` BIT(1) NOT NULL DEFAULT FALSE
);

CREATE TABLE orders(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`order_datetime` DATETIME NOT NULL,
`customer_id` INT NOT NULL,
CONSTRAINT fk_orders_customers FOREIGN KEY (customer_id)
REFERENCES customers (id)
);

CREATE TABLE orders_products(
`order_id` INT,
`product_id` INT ,
PRIMARY KEY (order_id, product_id),
CONSTRAINT fk_orders_orders FOREIGN KEY (order_id)
REFERENCES orders (id),
CONSTRAINT fk_orders_products FOREIGN KEY (product_id)
REFERENCES products (id)
);

INSERT INTO reviews(`content`, `rating`, `picture_url`, `published_at`)
SELECT (LEFT(p.`description` , 15)) AS `content`,
        (p.price / 8) AS `rating`,
        (reverse(p.`name`)) AS `picture_url`,
        STR_TO_DATE('10-10-2010', '%d-%m-%Y') AS `published_at`
        FROM products p
        WHERE p.`id` >= 5;
        
UPDATE products SET quantity_in_stock = quantity_in_stock - 5
WHERE quantity_in_stock >= 60 AND quantity_in_stock <= 70;

DELETE FROM customers c
WHERE c.`id` NOT IN (SELECT customer_id FROM orders);

SELECT c.`id`, c.`name`
FROM categories c 
ORDER BY c.`name` DESC;

SELECT p.`id`, p.brand_id , p.`name`, p.quantity_in_stock
FROM products p 
WHERE p.price > 1000 AND p.quantity_in_stock < 30
ORDER BY p.quantity_in_stock, p.`id`;

SELECT r.`id`, r.content, r.rating, r.picture_url, r.published_at
FROM reviews r 
WHERE r.content LIKE 'My%' AND CHAR_LENGTH(r.content) > 61
ORDER BY r.rating DESC;

SELECT concat(c.first_name ,' ', c.last_name) AS full_name, c.address, o.order_datetime
FROM customers c JOIN orders o ON c.id = o.customer_id
WHERE YEAR(o.order_datetime) <= 2018
ORDER BY full_name DESC;

SELECT count(p.`name`) AS items_count, c.`name`, sum(p.`quantity_in_stock`) AS total_quantity
FROM products p JOIN categories c ON p.category_id = c.id
GROUP BY c.`name`
ORDER BY items_count DESC, total_quantity LIMIT 5;

DELIMITER $$
CREATE FUNCTION udf_customer_products_count(name VARCHAR(30))
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE total INT;
SET total = (SELECT count(p.id) FROM customers c
            JOIN orders o ON c.id = o.customer_id JOIN
            orders_products op ON o.id = op.order_id 
            JOIN products p ON op.product_id = p.id
			WHERE c.first_name = name);
RETURN total;
END$$
DELIMITER ;

SELECT c.first_name,c.last_name, udf_customer_products_count('Shirley') as `total_products` FROM customers c
WHERE c.first_name = 'Shirley';

DELIMITER $$
CREATE PROCEDURE udp_reduce_price (category_name VARCHAR(50))
BEGIN
UPDATE products p JOIN categories c ON p.category_id = c.id JOIN reviews r ON p.review_id = r.id
SET p.price = p.price - (p.price * 30.0 / 100.0)
WHERE r.rating < 4 AND c.`name` = category_name;
END$$
DELIMITER ;

CALL udp_reduce_price ('Phones and tablets');