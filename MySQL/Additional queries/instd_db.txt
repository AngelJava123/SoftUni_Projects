CREATE DATABASE instd;
DROP DATABASE instd;
CREATE TABLE users(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`username` VARCHAR(30) NOT NULL UNIQUE,
`password` VARCHAR(30) NOT NULL,
`email` VARCHAR(50) NOT NULL,
`gender` CHAR(1) NOT NULL,
`age` INT NOT NULL,
`job_title` VARCHAR(40) NOT NULL,
`ip` VARCHAR(30) NOT NULL
);

CREATE TABLE addresses(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`address` VARCHAR(30) NOT NULL,
`town` VARCHAR(30) NOT NULL,
`country` VARCHAR(30) NOT NULL,
`user_id` INT NOT NULL,
CONSTRAINT fk_addresses_users FOREIGN KEY (user_id)
REFERENCES users (id)
);

CREATE TABLE photos(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`description` TEXT NOT NULL,
`date` DATETIME NOT NULL,
`views` INT NOT NULL DEFAULT 0
);

CREATE TABLE comments(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`comment` VARCHAR(255) NOT NULL,
`date` DATETIME NOT NULL,
`photo_id` INT NOT NULL,
CONSTRAINT fk_comments_photos FOREIGN KEY (photo_id)
REFERENCES photos (id)
);

CREATE TABLE users_photos(
`user_id` INT NOT NULL,
`photo_id` INT NOT NULL,
CONSTRAINT fk_users_photos_users FOREIGN KEY (user_id)
REFERENCES users (id),
CONSTRAINT fk_users_photos_photos FOREIGN KEY (photo_id)
REFERENCES photos (id)
);

CREATE TABLE likes(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`photo_id` INT,
`user_id` INT,
CONSTRAINT fk_likes_photos FOREIGN KEY (photo_id)
REFERENCES photos (id),
CONSTRAINT fk_likes_users FOREIGN KEY (user_id)
REFERENCES users (id)
);

INSERT INTO addresses(`address`, `town`, `country`, `user_id`)
SELECT  u.`username` AS `address`,
	    u.`password` AS `town`,
        u.`ip` AS `country`,
        u.`age` AS `user_id`
        FROM users u
        WHERE u.gender = 'M';
        
UPDATE `addresses` SET `country` =
 CASE 
 WHEN LEFT(country, 1) = 'B' THEN 'Blocked'
 WHEN LEFT(country, 1) = 'T' THEN 'Test'
 WHEN LEFT(country, 1) = 'P' THEN 'In Progress'
 ELSE country
 END;
 
DELETE FROM addresses
WHERE id % 3 = 0;

SELECT `username`, `gender`, `age`
FROM users 
ORDER BY `age` DESC, `username`;

SELECT p.id, p.`date` AS date_and_time, p.`description`, count(c.id) AS commentsCount
FROM photos p JOIN comments c ON p.id = c.photo_id
GROUP BY p.id
ORDER BY commentsCount DESC, p.id LIMIT 5;

SELECT concat(u.id, ' ', u.username) AS id_usernam, u.email
FROM users u JOIN users_photos up ON u.id = up.user_id
JOIN photos p ON up.photo_id = p.id
WHERE u.id = p.id
ORDER BY u.id;

SELECT p.id AS photo_id, count(DISTINCT l.id) AS likes_count, count(DISTINCT c.id) AS comments_count
FROM photos p LEFT JOIN likes l ON p.id = l.photo_id
LEFT JOIN comments c ON p.id = c.photo_id
GROUP BY p.id
ORDER BY likes_count DESC, comments_count DESC, p.id;

SELECT  concat(substring(p.`description`, 1, 30), '...') AS summary,  p.date
FROM photos p WHERE day(p.date) = 10
ORDER BY p.date DESC;

DELIMITER $$
CREATE FUNCTION udf_users_photos_count(username VARCHAR(30))
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE coun INT;
SET coun = (SELECT count(p.id) FROM users u
            JOIN users_photos up ON u.id = up.user_id
            JOIN photos p ON up.photo_id = p.id
            WHERE u.username = username);
RETURN coun;
END$$
DELIMITER ;

SELECT udf_users_photos_count('ssantryd') AS photosCount;

DELIMITER $$
CREATE PROCEDURE udp_modify_user (address VARCHAR(30), town VARCHAR(30))
BEGIN
UPDATE users u JOIN addresses a ON u.id = a.user_id SET age = age + 10
WHERE a.address = address AND a.town = town;
END$$
DELIMITER ;

CALL udp_modify_user ('97 Valley Edge Parkway', 'Divin√≥polis');
SELECT u.username, u.email,u.gender,u.age,u.job_title FROM users AS u
WHERE u.username = 'eblagden21';