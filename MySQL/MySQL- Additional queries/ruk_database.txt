CREATE DATABASE ruk_database;

CREATE TABLE branches(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(30) UNIQUE NOT NULL
);

CREATE TABLE employees(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`first_name` VARCHAR(20) NOT NULL,
`last_name` VARCHAR(20) NOT NULL,
`salary` DECIMAL(10,2) NOT NULL,
`started_on` DATE NOT NULL,
`branch_id` INT NOT NULL,
CONSTRAINT fk_employees_branches FOREIGN KEY (branch_id)
REFERENCES branches (id)
);

CREATE TABLE clients(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`full_name` VARCHAR(50) NOT NULL,
`age` INT NOT NULL
);

CREATE TABLE employees_clients(
`employee_id` INT,
`client_id` INT,
CONSTRAINT fk_employees_employees FOREIGN KEY (employee_id)
REFERENCES employees (id),
CONSTRAINT fk_employees_clients FOREIGN KEY (client_id)
REFERENCES clients (id)
);

CREATE TABLE bank_accounts(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`account_number` VARCHAR(10) NOT NULL,
`balance` DECIMAL(10,2) NOT NULL,
`client_id` INT UNIQUE NOT NULL,
CONSTRAINT fk_bank_accounts_clients FOREIGN KEY (client_id)
REFERENCES clients (id)
);

CREATE TABLE cards(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`card_number` VARCHAR(19) NOT NULL,
`card_status` VARCHAR(7) NOT NULL,
`bank_account_id` INT NOT NULL,
CONSTRAINT cards_bank_accounts FOREIGN KEY (bank_account_id)
REFERENCES bank_accounts (id)
);

INSERT INTO cards(`card_number`, `card_status`, `bank_account_id`)
SELECT 
		(REVERSE(c.full_name)) AS `card_number`,
		('Active') AS `card_status`,
		(c.id) AS  `bank_account_id`
	    FROM clients c
		WHERE c.id BETWEEN 191 AND 200;
        
UPDATE employees_clients as ec
JOIN
(SELECT ec1.employee_id, COUNT(ec1.client_id) AS 'count'
		FROM employees_clients as ec1 
		GROUP BY ec1.employee_id
		ORDER BY `count`, ec1.employee_id) AS s
SET ec.employee_id = s.employee_id
WHERE ec.employee_id = ec.client_id;

DELETE FROM employees 
WHERE id NOT IN (SELECT employee_id FROM employees_clients);

SELECT `id`, `full_name` FROM clients
ORDER BY id;

SELECT e.id, concat(e.first_name, " ", e.last_name) AS full_name ,concat('$', salary) AS salary ,started_on
FROM employees e
WHERE e.salary >= 100000 AND e.started_on >= '2018-01-01'
ORDER BY e.salary DESC, e.id;

SELECT ca.id, concat(ca.card_number, ' : ', c.full_name) AS card_token
FROM cards ca
JOIN bank_accounts ba ON ca.bank_account_id = ba.id
JOIN clients c ON ba.client_id = c.id
ORDER BY ca.id DESC;

SELECT concat(e.first_name, " ", e.last_name) AS `name`, e.started_on, count(ec.client_id) AS count_of_clients
FROM employees e
JOIN employees_clients ec ON e.id = ec.employee_id
GROUP BY ec.employee_id
ORDER BY count_of_clients DESC, ec.employee_id
LIMIT 5;

SELECT br.`name`, count(ca.id) AS count_of_cards
FROM branches br
LEFT JOIN employees e ON br.id = e.branch_id
LEFT JOIN employees_clients ec ON e.id = ec.employee_id
LEFT JOIN clients c ON ec.client_id = c.id
LEFT JOIN bank_accounts ba ON c.id = ba.client_id
LEFT JOIN cards ca ON ba.id = ca.bank_account_id
GROUP BY br.`name`
ORDER BY count_of_cards DESC, br.`name`;

DELIMITER $$
CREATE FUNCTION udf_client_cards_count(`name` VARCHAR(30))
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE result INT;

SET result = (SELECT count(ca.id) FROM cards ca
              JOIN bank_accounts ba ON ca.bank_account_id = ba.id
              JOIN clients c ON ba.client_id = c.id 
              WHERE `name` = c.full_name);
              RETURN result;
END$$
DELIMITER ;

SELECT c.full_name, udf_client_cards_count('Baxy David') as `cards` FROM clients c
WHERE c.full_name = 'Baxy David';


DELIMITER $$
CREATE PROCEDURE udp_clientinfo(`name` VARCHAR(50))
BEGIN
SELECT c.full_name, c.age, ba.account_number, concat('$', ba.balance) AS balance
FROM clients c 
JOIN bank_accounts ba ON c.id = ba.client_id
WHERE `name` = c.full_name;
END$$
DELIMITER ;

CALL udp_clientinfo('Hunter Wesgate');