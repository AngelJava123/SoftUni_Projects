CREATE DATABASE softuni_stores_system;

CREATE TABLE pictures(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`url` VARCHAR(100) NOT NULL,
`added_on` DATETIME NOT NULL
);

CREATE TABLE categories(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE products(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE,
`best_before` DATE,
`price` DECIMAL(10,2) NOT NULL,
`description` TEXT,
`category_id` INT NOT NULL,
`picture_id` INT NOT NULL,
CONSTRAINT fk_products_categories FOREIGN KEY (category_id)
REFERENCES categories (id),
CONSTRAINT fk_products_pictures FOREIGN KEY (picture_id)
REFERENCES pictures (id)
);

CREATE TABLE towns(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE addresses(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(50) NOT NULL UNIQUE,
`town_id` INT NOT NULL,
CONSTRAINT fk_addresses_towns FOREIGN KEY (town_id)
REFERENCES towns (id)
);

CREATE TABLE stores(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`name` VARCHAR(20) NOT NULL UNIQUE,
`rating` FLOAT NOT NULL,
`has_parking` BOOL DEFAULT FALSE,
`address_id` INT NOT NULL,
CONSTRAINT fk_stores_addresses FOREIGN KEY (address_id)
REFERENCES addresses (id)
);

CREATE TABLE products_stores(
`product_id` INT NOT NULL,
`store_id` INT NOT NULL,
PRIMARY KEY (product_id, store_id),
CONSTRAINT fk_products_products FOREIGN KEY (product_id)
REFERENCES products (id),
CONSTRAINT fk_products_stores FOREIGN KEY (store_id)
REFERENCES stores (id)
);

CREATE TABLE employees(
`id` INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
`first_name` VARCHAR(15) NOT NULL,
`middle_name` CHAR(1),
`last_name` VARCHAR(20) NOT NULL,
`salary` DECIMAL(19,2) NOT NULL DEFAULT 0,
`hire_date` DATE NOT NULL,
`manager_id` INT,
`store_id` INT NOT NULL,
CONSTRAINT fk_managers_employees FOREIGN KEY (manager_id)
REFERENCES employees (id),
CONSTRAINT fk_employees_stores FOREIGN KEY (store_id)
REFERENCES stores (id)
);

 SELECT p.id FROM products p WHERE p.id NOT IN (SELECT product_id FROM products_stores);

INSERT INTO products_stores(`product_id`, `store_id`)
VALUES (9, 1),
(10, 1),
(13, 1),
(16, 1),
(18, 1);

UPDATE employees SET manager_id = 3, salary = salary - 500
WHERE YEAR(hire_date) > 2003 AND store_id NOT IN(5, 14);

DELETE FROM employees
WHERE manager_id IS NOT NULL AND salary >= 6000;

SELECT first_name, middle_name, last_name, salary, hire_date
FROM employees
ORDER BY hire_date DESC;

SELECT p.`name`, p.price, p.best_before, concat(substring(p.`description`, 1, 10), '...') AS short_description,  
pi.url FROM products p JOIN pictures pi ON p.picture_id = pi.id
WHERE length(p.`description`) > 100 AND YEAR(pi.added_on) < 2019 AND p.price > 20
ORDER BY p.price DESC;

SELECT s.`name`, count(p.id) AS product_count, ROUND(AVG(p.price), 2) AS `avg`
FROM stores s LEFT JOIN products_stores ps ON s.id = ps.store_id
LEFT JOIN products p ON ps.product_id = p.id
GROUP BY s.`name`
ORDER BY product_count DESC, `avg` DESC, s.id;

SELECT concat(e.first_name, ' ', e.last_name) AS Full_name, s.`name`, a.`name`, e.salary
FROM employees e JOIN stores s ON e.store_id = s.id
JOIN addresses a ON s.address_id = a.id
WHERE e.salary < 4000 
AND a.`name` LIKE '%5%' 
AND length(s.`name`) > 8 
AND RIGHT(e.last_name, 1) = 'n';

SELECT REVERSE(s.`name`) AS reversed_name, concat(UPPER(t.`name`), '-', a.`name`) AS full_address,
count(e.id) AS employees_count
FROM employees e JOIN stores s ON e.store_id = s.id
JOIN addresses a ON s.address_id = a.id
JOIN towns t ON a.town_id = t.id
GROUP BY reversed_name, full_address
ORDER BY full_address;

DELIMITER $$
CREATE FUNCTION udf_top_paid_employee_by_store(store_name VARCHAR(50))
RETURNS TEXT
DETERMINISTIC
BEGIN
DECLARE info TEXT;
SET info = (SELECT concat(e.first_name,' ',e.middle_name,'. ',e.last_name,' ', 'works', ' '
			'in',' ', 'store',' ','for',' ', TIMESTAMPDIFF(YEAR, e.hire_date, '2020-10-18'), ' ', 'years')
            FROM employees e JOIN stores s ON e.store_id = s.id
            WHERE s.`name` = store_name
            ORDER BY e.salary DESC LIMIT 1);
RETURN info;
END$$
DELIMITER ;

SELECT udf_top_paid_employee_by_store('Keylex') as 'full_info';
SELECT udf_top_paid_employee_by_store('Stronghold') as 'full_info';

DELIMITER $$
CREATE PROCEDURE udp_update_product_price (address_name VARCHAR (50))
BEGIN
UPDATE products p JOIN products_stores ps ON p.id = ps.product_id
JOIN stores s ON ps.store_id = s.id JOIN addresses a ON s.address_id = a.id SET price = 
	   CASE
         WHEN left(address_name, 1) = 0 THEN price + 100
         ELSE price + 200
       END
WHERE a.`name` = address_name;
END$$
DELIMITER ;

CALL udp_update_product_price('07 Armistice Parkway');
SELECT name, price FROM products WHERE id = 15;

CALL udp_update_product_price('1 Cody Pass');
SELECT name, price FROM products WHERE id = 17;


